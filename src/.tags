!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AcceptKeyFrames	LocalMapping.cc	/^bool LocalMapping::AcceptKeyFrames()$/;"	f	class:Stereo_VO::LocalMapping
ActivateLocalizationMode	System.cc	/^void System::ActivateLocalizationMode()$/;"	f	class:Stereo_VO::System
AddChild	KeyFrame.cc	/^void KeyFrame::AddChild(KeyFrame *pKF)$/;"	f	class:Stereo_VO::KeyFrame
AddConnection	KeyFrame.cc	/^void KeyFrame::AddConnection(KeyFrame *pKF, const int &weight)$/;"	f	class:Stereo_VO::KeyFrame
AddKeyFrame	Map.cc	/^void Map::AddKeyFrame(KeyFrame *pKF)$/;"	f	class:Stereo_VO::Map
AddLoopEdge	KeyFrame.cc	/^void KeyFrame::AddLoopEdge(KeyFrame *pKF)$/;"	f	class:Stereo_VO::KeyFrame
AddMapPoint	KeyFrame.cc	/^void KeyFrame::AddMapPoint(MapPoint *pMP, const size_t &idx)$/;"	f	class:Stereo_VO::KeyFrame
AddMapPoint	Map.cc	/^void Map::AddMapPoint(MapPoint *pMP)$/;"	f	class:Stereo_VO::Map
AddObservation	MapPoint.cc	/^void MapPoint::AddObservation(KeyFrame* pKF, size_t idx)$/;"	f	class:Stereo_VO::MapPoint
AssignFeaturesToGrid	Frame.cc	/^void Frame::AssignFeaturesToGrid()$/;"	f	class:Stereo_VO::Frame
BundleAdjustment	Optimizer.cc	/^void Optimizer::BundleAdjustment(const vector<KeyFrame *> &vpKFs, const vector<MapPoint *> &vpMP,$/;"	f	class:Stereo_VO::Optimizer
ChangeCalibration	Tracking.cc	/^void Tracking::ChangeCalibration(const string &strSettingPath)$/;"	f	class:Stereo_VO::Tracking
ChangeParent	KeyFrame.cc	/^void KeyFrame::ChangeParent(KeyFrame *pKF)$/;"	f	class:Stereo_VO::KeyFrame
CheckDistEpipolarLine	ORBmatcher.cc	/^bool ORBmatcher::CheckDistEpipolarLine(const cv::KeyPoint &kp1,const cv::KeyPoint &kp2,const cv::Mat &F12,const KeyFrame* pKF2)$/;"	f	class:Stereo_VO::ORBmatcher
CheckFinish	LocalMapping.cc	/^bool LocalMapping::CheckFinish()$/;"	f	class:Stereo_VO::LocalMapping
CheckFinish	LoopClosing.cc	/^bool LoopClosing::CheckFinish()$/;"	f	class:Stereo_VO::LoopClosing
CheckFinish	Viewer.cc	/^bool Viewer::CheckFinish()$/;"	f	class:Stereo_VO::Viewer
CheckFundamental	Initializer.cc	/^float Initializer::CheckFundamental(const cv::Mat &F21, vector<bool> &vbMatchesInliers, float sigma)$/;"	f	class:Stereo_VO::Initializer
CheckHomography	Initializer.cc	/^float Initializer::CheckHomography(const cv::Mat &H21, const cv::Mat &H12, vector<bool> &vbMatchesInliers, float sigma)$/;"	f	class:Stereo_VO::Initializer
CheckInliers	PnPsolver.cc	/^void PnPsolver::CheckInliers()$/;"	f	class:Stereo_VO::PnPsolver
CheckInliers	Sim3Solver.cc	/^void Sim3Solver::CheckInliers()$/;"	f	class:Stereo_VO::Sim3Solver
CheckNewKeyFrames	LocalMapping.cc	/^bool LocalMapping::CheckNewKeyFrames()$/;"	f	class:Stereo_VO::LocalMapping
CheckNewKeyFrames	LoopClosing.cc	/^bool LoopClosing::CheckNewKeyFrames()$/;"	f	class:Stereo_VO::LoopClosing
CheckRT	Initializer.cc	/^int Initializer::CheckRT(const cv::Mat &R, const cv::Mat &t, const vector<cv::KeyPoint> &vKeys1, const vector<cv::KeyPoint> &vKeys2,$/;"	f	class:Stereo_VO::Initializer
CheckReplacedInLastFrame	Tracking.cc	/^void Tracking::CheckReplacedInLastFrame()$/;"	f	class:Stereo_VO::Tracking
ComputeBoW	Frame.cc	/^void Frame::ComputeBoW()$/;"	f	class:Stereo_VO::Frame
ComputeBoW	KeyFrame.cc	/^void KeyFrame::ComputeBoW()$/;"	f	class:Stereo_VO::KeyFrame
ComputeCentroid	Sim3Solver.cc	/^void Sim3Solver::ComputeCentroid(cv::Mat &P, cv::Mat &Pr, cv::Mat &C)$/;"	f	class:Stereo_VO::Sim3Solver
ComputeDistinctiveDescriptors	MapPoint.cc	/^void MapPoint::ComputeDistinctiveDescriptors()$/;"	f	class:Stereo_VO::MapPoint
ComputeF12	LocalMapping.cc	/^cv::Mat LocalMapping::ComputeF12(KeyFrame *&pKF1, KeyFrame *&pKF2)$/;"	f	class:Stereo_VO::LocalMapping
ComputeF21	Initializer.cc	/^cv::Mat Initializer::ComputeF21(const vector<cv::Point2f> &vP1,const vector<cv::Point2f> &vP2)$/;"	f	class:Stereo_VO::Initializer
ComputeH21	Initializer.cc	/^cv::Mat Initializer::ComputeH21(const vector<cv::Point2f> &vP1, const vector<cv::Point2f> &vP2)$/;"	f	class:Stereo_VO::Initializer
ComputeImageBounds	Frame.cc	/^void Frame::ComputeImageBounds(const cv::Mat &imLeft)$/;"	f	class:Stereo_VO::Frame
ComputeKeyPointsOctTree	ORBextractor.cc	/^void ORBextractor::ComputeKeyPointsOctTree(vector<vector<KeyPoint> >& allKeypoints)$/;"	f	class:Stereo_VO::ORBextractor
ComputeKeyPointsOld	ORBextractor.cc	/^void ORBextractor::ComputeKeyPointsOld(std::vector<std::vector<KeyPoint> > &allKeypoints)$/;"	f	class:Stereo_VO::ORBextractor
ComputePyramid	ORBextractor.cc	/^void ORBextractor::ComputePyramid(cv::Mat image)$/;"	f	class:Stereo_VO::ORBextractor
ComputeSceneMedianDepth	KeyFrame.cc	/^float KeyFrame::ComputeSceneMedianDepth(const int q)$/;"	f	class:Stereo_VO::KeyFrame
ComputeSim3	LoopClosing.cc	/^bool LoopClosing::ComputeSim3()$/;"	f	class:Stereo_VO::LoopClosing
ComputeSim3	Sim3Solver.cc	/^void Sim3Solver::ComputeSim3(cv::Mat &P1, cv::Mat &P2)$/;"	f	class:Stereo_VO::Sim3Solver
ComputeStereoFromRGBD	Frame.cc	/^void Frame::ComputeStereoFromRGBD(const cv::Mat &imDepth)$/;"	f	class:Stereo_VO::Frame
ComputeStereoMatches	Frame.cc	/^void Frame::ComputeStereoMatches()$/;"	f	class:Stereo_VO::Frame
ComputeThreeMaxima	ORBmatcher.cc	/^void ORBmatcher::ComputeThreeMaxima(vector<int>* histo, const int L, int &ind1, int &ind2, int &ind3)$/;"	f	class:Stereo_VO::ORBmatcher
CorrectLoop	LoopClosing.cc	/^void LoopClosing::CorrectLoop()$/;"	f	class:Stereo_VO::LoopClosing
CreateInitialMapMonocular	Tracking.cc	/^void Tracking::CreateInitialMapMonocular()$/;"	f	class:Stereo_VO::Tracking
CreateNewKeyFrame	Tracking.cc	/^void Tracking::CreateNewKeyFrame()$/;"	f	class:Stereo_VO::Tracking
CreateNewMapPoints	LocalMapping.cc	/^void LocalMapping::CreateNewMapPoints()$/;"	f	class:Stereo_VO::LocalMapping
DeactivateLocalizationMode	System.cc	/^void System::DeactivateLocalizationMode()$/;"	f	class:Stereo_VO::System
DecomposeE	Initializer.cc	/^void Initializer::DecomposeE(const cv::Mat &E, cv::Mat &R1, cv::Mat &R2, cv::Mat &t)$/;"	f	class:Stereo_VO::Initializer
DescriptorDistance	ORBmatcher.cc	/^int ORBmatcher::DescriptorDistance(const cv::Mat &a, const cv::Mat &b)$/;"	f	class:Stereo_VO::ORBmatcher
DetectLoop	LoopClosing.cc	/^bool LoopClosing::DetectLoop()$/;"	f	class:Stereo_VO::LoopClosing
DetectLoopCandidates	KeyFrameDatabase.cc	/^vector<KeyFrame*> KeyFrameDatabase::DetectLoopCandidates(KeyFrame* pKF, float minScore)$/;"	f	class:Stereo_VO::KeyFrameDatabase
DetectRelocalizationCandidates	KeyFrameDatabase.cc	/^vector<KeyFrame*> KeyFrameDatabase::DetectRelocalizationCandidates(Frame *F)$/;"	f	class:Stereo_VO::KeyFrameDatabase
DistributeOctTree	ORBextractor.cc	/^vector<cv::KeyPoint> ORBextractor::DistributeOctTree(const vector<cv::KeyPoint>& vToDistributeKeys, const int &minX,$/;"	f	class:Stereo_VO::ORBextractor
DivideNode	ORBextractor.cc	/^void ExtractorNode::DivideNode(ExtractorNode &n1, ExtractorNode &n2, ExtractorNode &n3, ExtractorNode &n4)$/;"	f	class:Stereo_VO::ExtractorNode
DrawCurrentCamera	MapDrawer.cc	/^void MapDrawer::DrawCurrentCamera(pangolin::OpenGlMatrix &Twc)$/;"	f	class:Stereo_VO::MapDrawer
DrawFrame	FrameDrawer.cc	/^cv::Mat FrameDrawer::DrawFrame()$/;"	f	class:Stereo_VO::FrameDrawer
DrawKeyFrames	MapDrawer.cc	/^void MapDrawer::DrawKeyFrames(const bool bDrawKF, const bool bDrawGraph)$/;"	f	class:Stereo_VO::MapDrawer
DrawMapPoints	MapDrawer.cc	/^void MapDrawer::DrawMapPoints()$/;"	f	class:Stereo_VO::MapDrawer
DrawTextInfo	FrameDrawer.cc	/^void FrameDrawer::DrawTextInfo(cv::Mat &im, int nState, cv::Mat &imText)$/;"	f	class:Stereo_VO::FrameDrawer
EDGE_THRESHOLD	ORBextractor.cc	/^const int EDGE_THRESHOLD = 19;$/;"	m	namespace:Stereo_VO	file:
EraseChild	KeyFrame.cc	/^void KeyFrame::EraseChild(KeyFrame *pKF)$/;"	f	class:Stereo_VO::KeyFrame
EraseConnection	KeyFrame.cc	/^void KeyFrame::EraseConnection(KeyFrame* pKF)$/;"	f	class:Stereo_VO::KeyFrame
EraseKeyFrame	Map.cc	/^void Map::EraseKeyFrame(KeyFrame *pKF)$/;"	f	class:Stereo_VO::Map
EraseMapPoint	Map.cc	/^void Map::EraseMapPoint(MapPoint *pMP)$/;"	f	class:Stereo_VO::Map
EraseMapPointMatch	KeyFrame.cc	/^void KeyFrame::EraseMapPointMatch(MapPoint* pMP)$/;"	f	class:Stereo_VO::KeyFrame
EraseMapPointMatch	KeyFrame.cc	/^void KeyFrame::EraseMapPointMatch(const size_t &idx)$/;"	f	class:Stereo_VO::KeyFrame
EraseObservation	MapPoint.cc	/^void MapPoint::EraseObservation(KeyFrame* pKF)$/;"	f	class:Stereo_VO::MapPoint
ExtractORB	Frame.cc	/^void Frame::ExtractORB(int flag, const cv::Mat &im)$/;"	f	class:Stereo_VO::Frame
FindFundamental	Initializer.cc	/^void Initializer::FindFundamental(vector<bool> &vbMatchesInliers, float &score, cv::Mat &F21)$/;"	f	class:Stereo_VO::Initializer
FindHomography	Initializer.cc	/^void Initializer::FindHomography(vector<bool> &vbMatchesInliers, float &score, cv::Mat &H21)$/;"	f	class:Stereo_VO::Initializer
Frame	Frame.cc	/^Frame::Frame()$/;"	f	class:Stereo_VO::Frame
Frame	Frame.cc	/^Frame::Frame(const Frame &frame)$/;"	f	class:Stereo_VO::Frame
Frame	Frame.cc	/^Frame::Frame(const cv::Mat &imGray, const cv::Mat &imDepth, const double &timeStamp, ORBextractor* extractor,ORBVocabulary* voc, cv::Mat &K, cv::Mat &distCoef, const float &bf, const float &thDepth)$/;"	f	class:Stereo_VO::Frame
Frame	Frame.cc	/^Frame::Frame(const cv::Mat &imGray, const double &timeStamp, ORBextractor* extractor,ORBVocabulary* voc, cv::Mat &K, cv::Mat &distCoef, const float &bf, const float &thDepth)$/;"	f	class:Stereo_VO::Frame
Frame	Frame.cc	/^Frame::Frame(const cv::Mat &imLeft, const cv::Mat &imRight, const double &timeStamp, ORBextractor* extractorLeft, ORBextractor* extractorRight, ORBVocabulary* voc, cv::Mat &K, cv::Mat &distCoef, const float &bf, const float &thDepth)$/;"	f	class:Stereo_VO::Frame
FrameDrawer	FrameDrawer.cc	/^FrameDrawer::FrameDrawer(Map* pMap):mpMap(pMap)$/;"	f	class:Stereo_VO::FrameDrawer
FromCameraToImage	Sim3Solver.cc	/^void Sim3Solver::FromCameraToImage(const vector<cv::Mat> &vP3Dc, vector<cv::Mat> &vP2D, cv::Mat K)$/;"	f	class:Stereo_VO::Sim3Solver
Fuse	ORBmatcher.cc	/^int ORBmatcher::Fuse(KeyFrame *pKF, const vector<MapPoint *> &vpMapPoints, const float th)$/;"	f	class:Stereo_VO::ORBmatcher
Fuse	ORBmatcher.cc	/^int ORBmatcher::Fuse(KeyFrame *pKF, cv::Mat Scw, const vector<MapPoint *> &vpPoints, float th, vector<MapPoint *> &vpReplacePoint)$/;"	f	class:Stereo_VO::ORBmatcher
GET_VALUE	ORBextractor.cc	118;"	d	file:
GET_VALUE	ORBextractor.cc	146;"	d	file:
GetAllKeyFrames	Map.cc	/^vector<KeyFrame*> Map::GetAllKeyFrames()$/;"	f	class:Stereo_VO::Map
GetAllMapPoints	Map.cc	/^vector<MapPoint*> Map::GetAllMapPoints()$/;"	f	class:Stereo_VO::Map
GetBestCovisibilityKeyFrames	KeyFrame.cc	/^vector<KeyFrame*> KeyFrame::GetBestCovisibilityKeyFrames(const int &N)$/;"	f	class:Stereo_VO::KeyFrame
GetCameraCenter	KeyFrame.cc	/^cv::Mat KeyFrame::GetCameraCenter()$/;"	f	class:Stereo_VO::KeyFrame
GetChilds	KeyFrame.cc	/^set<KeyFrame*> KeyFrame::GetChilds()$/;"	f	class:Stereo_VO::KeyFrame
GetConnectedKeyFrames	KeyFrame.cc	/^set<KeyFrame*> KeyFrame::GetConnectedKeyFrames()$/;"	f	class:Stereo_VO::KeyFrame
GetCovisiblesByWeight	KeyFrame.cc	/^vector<KeyFrame*> KeyFrame::GetCovisiblesByWeight(const int &w)$/;"	f	class:Stereo_VO::KeyFrame
GetCurrentOpenGLCameraMatrix	MapDrawer.cc	/^void MapDrawer::GetCurrentOpenGLCameraMatrix(pangolin::OpenGlMatrix &M)$/;"	f	class:Stereo_VO::MapDrawer
GetDescriptor	MapPoint.cc	/^cv::Mat MapPoint::GetDescriptor()$/;"	f	class:Stereo_VO::MapPoint
GetEstimatedRotation	Sim3Solver.cc	/^cv::Mat Sim3Solver::GetEstimatedRotation()$/;"	f	class:Stereo_VO::Sim3Solver
GetEstimatedScale	Sim3Solver.cc	/^float Sim3Solver::GetEstimatedScale()$/;"	f	class:Stereo_VO::Sim3Solver
GetEstimatedTranslation	Sim3Solver.cc	/^cv::Mat Sim3Solver::GetEstimatedTranslation()$/;"	f	class:Stereo_VO::Sim3Solver
GetFeaturesInArea	Frame.cc	/^vector<size_t> Frame::GetFeaturesInArea(const float &x, const float  &y, const float  &r, const int minLevel, const int maxLevel) const$/;"	f	class:Stereo_VO::Frame
GetFeaturesInArea	KeyFrame.cc	/^vector<size_t> KeyFrame::GetFeaturesInArea(const float &x, const float &y, const float &r) const$/;"	f	class:Stereo_VO::KeyFrame
GetFoundRatio	MapPoint.cc	/^float MapPoint::GetFoundRatio()$/;"	f	class:Stereo_VO::MapPoint
GetIndexInKeyFrame	MapPoint.cc	/^int MapPoint::GetIndexInKeyFrame(KeyFrame *pKF)$/;"	f	class:Stereo_VO::MapPoint
GetLoopEdges	KeyFrame.cc	/^set<KeyFrame*> KeyFrame::GetLoopEdges()$/;"	f	class:Stereo_VO::KeyFrame
GetMapPoint	KeyFrame.cc	/^MapPoint* KeyFrame::GetMapPoint(const size_t &idx)$/;"	f	class:Stereo_VO::KeyFrame
GetMapPointMatches	KeyFrame.cc	/^vector<MapPoint*> KeyFrame::GetMapPointMatches()$/;"	f	class:Stereo_VO::KeyFrame
GetMapPoints	KeyFrame.cc	/^set<MapPoint*> KeyFrame::GetMapPoints()$/;"	f	class:Stereo_VO::KeyFrame
GetMaxDistanceInvariance	MapPoint.cc	/^float MapPoint::GetMaxDistanceInvariance()$/;"	f	class:Stereo_VO::MapPoint
GetMaxKFid	Map.cc	/^long unsigned int Map::GetMaxKFid()$/;"	f	class:Stereo_VO::Map
GetMinDistanceInvariance	MapPoint.cc	/^float MapPoint::GetMinDistanceInvariance()$/;"	f	class:Stereo_VO::MapPoint
GetNormal	MapPoint.cc	/^cv::Mat MapPoint::GetNormal()$/;"	f	class:Stereo_VO::MapPoint
GetObservations	MapPoint.cc	/^map<KeyFrame*, size_t> MapPoint::GetObservations()$/;"	f	class:Stereo_VO::MapPoint
GetParent	KeyFrame.cc	/^KeyFrame* KeyFrame::GetParent()$/;"	f	class:Stereo_VO::KeyFrame
GetPose	KeyFrame.cc	/^cv::Mat KeyFrame::GetPose()$/;"	f	class:Stereo_VO::KeyFrame
GetPoseInverse	KeyFrame.cc	/^cv::Mat KeyFrame::GetPoseInverse()$/;"	f	class:Stereo_VO::KeyFrame
GetReferenceKeyFrame	MapPoint.cc	/^KeyFrame* MapPoint::GetReferenceKeyFrame()$/;"	f	class:Stereo_VO::MapPoint
GetReferenceMapPoints	Map.cc	/^vector<MapPoint*> Map::GetReferenceMapPoints()$/;"	f	class:Stereo_VO::Map
GetReplaced	MapPoint.cc	/^MapPoint* MapPoint::GetReplaced()$/;"	f	class:Stereo_VO::MapPoint
GetRotation	KeyFrame.cc	/^cv::Mat KeyFrame::GetRotation()$/;"	f	class:Stereo_VO::KeyFrame
GetStereoCenter	KeyFrame.cc	/^cv::Mat KeyFrame::GetStereoCenter()$/;"	f	class:Stereo_VO::KeyFrame
GetTranslation	KeyFrame.cc	/^cv::Mat KeyFrame::GetTranslation()$/;"	f	class:Stereo_VO::KeyFrame
GetVectorCovisibleKeyFrames	KeyFrame.cc	/^vector<KeyFrame*> KeyFrame::GetVectorCovisibleKeyFrames()$/;"	f	class:Stereo_VO::KeyFrame
GetWeight	KeyFrame.cc	/^int KeyFrame::GetWeight(KeyFrame *pKF)$/;"	f	class:Stereo_VO::KeyFrame
GetWorldPos	MapPoint.cc	/^cv::Mat MapPoint::GetWorldPos()$/;"	f	class:Stereo_VO::MapPoint
GlobalBundleAdjustemnt	Optimizer.cc	/^void Optimizer::GlobalBundleAdjustemnt(Map* pMap, int nIterations, bool* pbStopFlag, const unsigned long nLoopKF, const bool bRobust)$/;"	f	class:Stereo_VO::Optimizer
GrabImageMonocular	Tracking.cc	/^cv::Mat Tracking::GrabImageMonocular(const cv::Mat &im, const double &timestamp)$/;"	f	class:Stereo_VO::Tracking
GrabImageRGBD	Tracking.cc	/^cv::Mat Tracking::GrabImageRGBD(const cv::Mat &imRGB,const cv::Mat &imD, const double &timestamp)$/;"	f	class:Stereo_VO::Tracking
GrabImageStereo	Tracking.cc	/^cv::Mat Tracking::GrabImageStereo(const cv::Mat &imRectLeft, const cv::Mat &imRectRight, const double &timestamp)$/;"	f	class:Stereo_VO::Tracking
HALF_PATCH_SIZE	ORBextractor.cc	/^const int HALF_PATCH_SIZE = 15;$/;"	m	namespace:Stereo_VO	file:
HISTO_LENGTH	ORBmatcher.cc	/^const int ORBmatcher::HISTO_LENGTH = 30;$/;"	m	class:Stereo_VO::ORBmatcher	file:
IC_Angle	ORBextractor.cc	/^static float IC_Angle(const Mat& image, Point2f pt,  const vector<int> & u_max)$/;"	f	namespace:Stereo_VO
IncreaseFound	MapPoint.cc	/^void MapPoint::IncreaseFound(int n)$/;"	f	class:Stereo_VO::MapPoint
IncreaseVisible	MapPoint.cc	/^void MapPoint::IncreaseVisible(int n)$/;"	f	class:Stereo_VO::MapPoint
InformOnlyTracking	Tracking.cc	/^void Tracking::InformOnlyTracking(const bool &flag)$/;"	f	class:Stereo_VO::Tracking
Initialize	Initializer.cc	/^bool Initializer::Initialize(const Frame &CurrentFrame, const vector<int> &vMatches12, cv::Mat &R21, cv::Mat &t21,$/;"	f	class:Stereo_VO::Initializer
Initializer	Initializer.cc	/^Initializer::Initializer(const Frame &ReferenceFrame, float sigma, int iterations)$/;"	f	class:Stereo_VO::Initializer
InsertKeyFrame	LocalMapping.cc	/^void LocalMapping::InsertKeyFrame(KeyFrame *pKF)$/;"	f	class:Stereo_VO::LocalMapping
InsertKeyFrame	LoopClosing.cc	/^void LoopClosing::InsertKeyFrame(KeyFrame *pKF)$/;"	f	class:Stereo_VO::LoopClosing
InterruptBA	LocalMapping.cc	/^void LocalMapping::InterruptBA()$/;"	f	class:Stereo_VO::LocalMapping
IsInImage	KeyFrame.cc	/^bool KeyFrame::IsInImage(const float &x, const float &y) const$/;"	f	class:Stereo_VO::KeyFrame
IsInKeyFrame	MapPoint.cc	/^bool MapPoint::IsInKeyFrame(KeyFrame *pKF)$/;"	f	class:Stereo_VO::MapPoint
KeyFrame	KeyFrame.cc	/^KeyFrame::KeyFrame(Frame &F, Map *pMap, KeyFrameDatabase *pKFDB):$/;"	f	class:Stereo_VO::KeyFrame
KeyFrameCulling	LocalMapping.cc	/^void LocalMapping::KeyFrameCulling()$/;"	f	class:Stereo_VO::LocalMapping
KeyFrameDatabase	KeyFrameDatabase.cc	/^KeyFrameDatabase::KeyFrameDatabase (const ORBVocabulary &voc):$/;"	f	class:Stereo_VO::KeyFrameDatabase
KeyFramesInMap	Map.cc	/^long unsigned int Map::KeyFramesInMap()$/;"	f	class:Stereo_VO::Map
LocalBundleAdjustment	Optimizer.cc	/^void Optimizer::LocalBundleAdjustment(KeyFrame *pKF, bool* pbStopFlag, Map* pMap)$/;"	f	class:Stereo_VO::Optimizer
LocalMapping	LocalMapping.cc	/^LocalMapping::LocalMapping(Map *pMap, const float bMonocular):$/;"	f	class:Stereo_VO::LocalMapping
LoopClosing	LoopClosing.cc	/^LoopClosing::LoopClosing(Map *pMap, KeyFrameDatabase *pDB, ORBVocabulary *pVoc, const bool bFixScale):$/;"	f	class:Stereo_VO::LoopClosing
Map	Map.cc	/^Map::Map():mnMaxKFid(0)$/;"	f	class:Stereo_VO::Map
MapDrawer	MapDrawer.cc	/^MapDrawer::MapDrawer(Map* pMap, const string &strSettingPath):mpMap(pMap)$/;"	f	class:Stereo_VO::MapDrawer
MapPoint	MapPoint.cc	/^MapPoint::MapPoint(const cv::Mat &Pos, KeyFrame *pRefKF, Map* pMap):$/;"	f	class:Stereo_VO::MapPoint
MapPoint	MapPoint.cc	/^MapPoint::MapPoint(const cv::Mat &Pos, Map* pMap, Frame* pFrame, const int &idxF):$/;"	f	class:Stereo_VO::MapPoint
MapPointCulling	LocalMapping.cc	/^void LocalMapping::MapPointCulling()$/;"	f	class:Stereo_VO::LocalMapping
MapPointsInMap	Map.cc	/^long unsigned int Map::MapPointsInMap()$/;"	f	class:Stereo_VO::Map
MonocularInitialization	Tracking.cc	/^void Tracking::MonocularInitialization()$/;"	f	class:Stereo_VO::Tracking
NeedNewKeyFrame	Tracking.cc	/^bool Tracking::NeedNewKeyFrame()$/;"	f	class:Stereo_VO::Tracking
Normalize	Initializer.cc	/^void Initializer::Normalize(const vector<cv::KeyPoint> &vKeys, vector<cv::Point2f> &vNormalizedPoints, cv::Mat &T)$/;"	f	class:Stereo_VO::Initializer
Stereo_VO	Converter.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	Frame.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	FrameDrawer.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	Initializer.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	KeyFrame.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	KeyFrameDatabase.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	LocalMapping.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	LoopClosing.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	Map.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	MapDrawer.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	MapPoint.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	ORBextractor.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	ORBmatcher.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	Optimizer.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	PnPsolver.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	Sim3Solver.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	System.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	Tracking.cc	/^namespace Stereo_VO$/;"	n	file:
Stereo_VO	Viewer.cc	/^namespace Stereo_VO$/;"	n	file:
ORBextractor	ORBextractor.cc	/^ORBextractor::ORBextractor(int _nfeatures, float _scaleFactor, int _nlevels,$/;"	f	class:Stereo_VO::ORBextractor
ORBmatcher	ORBmatcher.cc	/^ORBmatcher::ORBmatcher(float nnratio, bool checkOri): mfNNratio(nnratio), mbCheckOrientation(checkOri)$/;"	f	class:Stereo_VO::ORBmatcher
Observations	MapPoint.cc	/^int MapPoint::Observations()$/;"	f	class:Stereo_VO::MapPoint
OptimizeEssentialGraph	Optimizer.cc	/^void Optimizer::OptimizeEssentialGraph(Map* pMap, KeyFrame* pLoopKF, KeyFrame* pCurKF,$/;"	f	class:Stereo_VO::Optimizer
OptimizeSim3	Optimizer.cc	/^int Optimizer::OptimizeSim3(KeyFrame *pKF1, KeyFrame *pKF2, vector<MapPoint *> &vpMatches1, g2o::Sim3 &g2oS12, const float th2, const bool bFixScale)$/;"	f	class:Stereo_VO::Optimizer
PATCH_SIZE	ORBextractor.cc	/^const int PATCH_SIZE = 31;$/;"	m	namespace:Stereo_VO	file:
PnPsolver	PnPsolver.cc	/^PnPsolver::PnPsolver(const Frame &F, const vector<MapPoint*> &vpMapPointMatches):$/;"	f	class:Stereo_VO::PnPsolver
PosInGrid	Frame.cc	/^bool Frame::PosInGrid(const cv::KeyPoint &kp, int &posX, int &posY)$/;"	f	class:Stereo_VO::Frame
PoseOptimization	Optimizer.cc	/^int Optimizer::PoseOptimization(Frame *pFrame)$/;"	f	class:Stereo_VO::Optimizer
PredictScale	MapPoint.cc	/^int MapPoint::PredictScale(const float &currentDist, const float &logScaleFactor)$/;"	f	class:Stereo_VO::MapPoint
ProcessNewKeyFrame	LocalMapping.cc	/^void LocalMapping::ProcessNewKeyFrame()$/;"	f	class:Stereo_VO::LocalMapping
Project	Sim3Solver.cc	/^void Sim3Solver::Project(const vector<cv::Mat> &vP3Dw, vector<cv::Mat> &vP2D, cv::Mat Tcw, cv::Mat K)$/;"	f	class:Stereo_VO::Sim3Solver
RadiusByViewingCos	ORBmatcher.cc	/^float ORBmatcher::RadiusByViewingCos(const float &viewCos)$/;"	f	class:Stereo_VO::ORBmatcher
ReconstructF	Initializer.cc	/^bool Initializer::ReconstructF(vector<bool> &vbMatchesInliers, cv::Mat &F21, cv::Mat &K,$/;"	f	class:Stereo_VO::Initializer
ReconstructH	Initializer.cc	/^bool Initializer::ReconstructH(vector<bool> &vbMatchesInliers, cv::Mat &H21, cv::Mat &K,$/;"	f	class:Stereo_VO::Initializer
Refine	PnPsolver.cc	/^bool PnPsolver::Refine()$/;"	f	class:Stereo_VO::PnPsolver
Release	LocalMapping.cc	/^void LocalMapping::Release()$/;"	f	class:Stereo_VO::LocalMapping
Release	Viewer.cc	/^void Viewer::Release()$/;"	f	class:Stereo_VO::Viewer
Relocalization	Tracking.cc	/^bool Tracking::Relocalization()$/;"	f	class:Stereo_VO::Tracking
Replace	MapPoint.cc	/^void MapPoint::Replace(MapPoint* pMP)$/;"	f	class:Stereo_VO::MapPoint
ReplaceMapPointMatch	KeyFrame.cc	/^void KeyFrame::ReplaceMapPointMatch(const size_t &idx, MapPoint* pMP)$/;"	f	class:Stereo_VO::KeyFrame
RequestFinish	LocalMapping.cc	/^void LocalMapping::RequestFinish()$/;"	f	class:Stereo_VO::LocalMapping
RequestFinish	LoopClosing.cc	/^void LoopClosing::RequestFinish()$/;"	f	class:Stereo_VO::LoopClosing
RequestFinish	Viewer.cc	/^void Viewer::RequestFinish()$/;"	f	class:Stereo_VO::Viewer
RequestReset	LocalMapping.cc	/^void LocalMapping::RequestReset()$/;"	f	class:Stereo_VO::LocalMapping
RequestReset	LoopClosing.cc	/^void LoopClosing::RequestReset()$/;"	f	class:Stereo_VO::LoopClosing
RequestStop	LocalMapping.cc	/^void LocalMapping::RequestStop()$/;"	f	class:Stereo_VO::LocalMapping
RequestStop	Viewer.cc	/^void Viewer::RequestStop()$/;"	f	class:Stereo_VO::Viewer
Reset	System.cc	/^void System::Reset()$/;"	f	class:Stereo_VO::System
Reset	Tracking.cc	/^void Tracking::Reset()$/;"	f	class:Stereo_VO::Tracking
ResetIfRequested	LocalMapping.cc	/^void LocalMapping::ResetIfRequested()$/;"	f	class:Stereo_VO::LocalMapping
ResetIfRequested	LoopClosing.cc	/^void LoopClosing::ResetIfRequested()$/;"	f	class:Stereo_VO::LoopClosing
Run	LocalMapping.cc	/^void LocalMapping::Run()$/;"	f	class:Stereo_VO::LocalMapping
Run	LoopClosing.cc	/^void LoopClosing::Run()$/;"	f	class:Stereo_VO::LoopClosing
Run	Viewer.cc	/^void Viewer::Run()$/;"	f	class:Stereo_VO::Viewer
RunGlobalBundleAdjustment	LoopClosing.cc	/^void LoopClosing::RunGlobalBundleAdjustment(unsigned long nLoopKF)$/;"	f	class:Stereo_VO::LoopClosing
SaveKeyFrameTrajectoryTUM	System.cc	/^void System::SaveKeyFrameTrajectoryTUM(const string &filename)$/;"	f	class:Stereo_VO::System
SaveTrajectoryKITTI	System.cc	/^void System::SaveTrajectoryKITTI(const string &filename)$/;"	f	class:Stereo_VO::System
SaveTrajectoryTUM	System.cc	/^void System::SaveTrajectoryTUM(const string &filename)$/;"	f	class:Stereo_VO::System
SearchAndFuse	LoopClosing.cc	/^void LoopClosing::SearchAndFuse(const KeyFrameAndPose &CorrectedPosesMap)$/;"	f	class:Stereo_VO::LoopClosing
SearchByBoW	ORBmatcher.cc	/^int ORBmatcher::SearchByBoW(KeyFrame *pKF1, KeyFrame *pKF2, vector<MapPoint *> &vpMatches12)$/;"	f	class:Stereo_VO::ORBmatcher
SearchByBoW	ORBmatcher.cc	/^int ORBmatcher::SearchByBoW(KeyFrame* pKF,Frame &F, vector<MapPoint*> &vpMapPointMatches)$/;"	f	class:Stereo_VO::ORBmatcher
SearchByProjection	ORBmatcher.cc	/^int ORBmatcher::SearchByProjection(Frame &CurrentFrame, KeyFrame *pKF, const set<MapPoint*> &sAlreadyFound, const float th , const int ORBdist)$/;"	f	class:Stereo_VO::ORBmatcher
SearchByProjection	ORBmatcher.cc	/^int ORBmatcher::SearchByProjection(Frame &CurrentFrame, const Frame &LastFrame, const float th, const bool bMono)$/;"	f	class:Stereo_VO::ORBmatcher
SearchByProjection	ORBmatcher.cc	/^int ORBmatcher::SearchByProjection(Frame &F, const vector<MapPoint*> &vpMapPoints, const float th)$/;"	f	class:Stereo_VO::ORBmatcher
SearchByProjection	ORBmatcher.cc	/^int ORBmatcher::SearchByProjection(KeyFrame* pKF, cv::Mat Scw, const vector<MapPoint*> &vpPoints, vector<MapPoint*> &vpMatched, int th)$/;"	f	class:Stereo_VO::ORBmatcher
SearchBySim3	ORBmatcher.cc	/^int ORBmatcher::SearchBySim3(KeyFrame *pKF1, KeyFrame *pKF2, vector<MapPoint*> &vpMatches12,$/;"	f	class:Stereo_VO::ORBmatcher
SearchForInitialization	ORBmatcher.cc	/^int ORBmatcher::SearchForInitialization(Frame &F1, Frame &F2, vector<cv::Point2f> &vbPrevMatched, vector<int> &vnMatches12, int windowSize)$/;"	f	class:Stereo_VO::ORBmatcher
SearchForTriangulation	ORBmatcher.cc	/^int ORBmatcher::SearchForTriangulation(KeyFrame *pKF1, KeyFrame *pKF2, cv::Mat F12,$/;"	f	class:Stereo_VO::ORBmatcher
SearchInNeighbors	LocalMapping.cc	/^void LocalMapping::SearchInNeighbors()$/;"	f	class:Stereo_VO::LocalMapping
SearchLocalPoints	Tracking.cc	/^void Tracking::SearchLocalPoints()$/;"	f	class:Stereo_VO::Tracking
SetAcceptKeyFrames	LocalMapping.cc	/^void LocalMapping::SetAcceptKeyFrames(bool flag)$/;"	f	class:Stereo_VO::LocalMapping
SetBadFlag	KeyFrame.cc	/^void KeyFrame::SetBadFlag()$/;"	f	class:Stereo_VO::KeyFrame
SetBadFlag	MapPoint.cc	/^void MapPoint::SetBadFlag()$/;"	f	class:Stereo_VO::MapPoint
SetCurrentCameraPose	MapDrawer.cc	/^void MapDrawer::SetCurrentCameraPose(const cv::Mat &Tcw)$/;"	f	class:Stereo_VO::MapDrawer
SetErase	KeyFrame.cc	/^void KeyFrame::SetErase()$/;"	f	class:Stereo_VO::KeyFrame
SetFinish	LocalMapping.cc	/^void LocalMapping::SetFinish()$/;"	f	class:Stereo_VO::LocalMapping
SetFinish	LoopClosing.cc	/^void LoopClosing::SetFinish()$/;"	f	class:Stereo_VO::LoopClosing
SetFinish	Viewer.cc	/^void Viewer::SetFinish()$/;"	f	class:Stereo_VO::Viewer
SetLocalMapper	LoopClosing.cc	/^void LoopClosing::SetLocalMapper(LocalMapping *pLocalMapper)$/;"	f	class:Stereo_VO::LoopClosing
SetLocalMapper	Tracking.cc	/^void Tracking::SetLocalMapper(LocalMapping *pLocalMapper)$/;"	f	class:Stereo_VO::Tracking
SetLoopCloser	LocalMapping.cc	/^void LocalMapping::SetLoopCloser(LoopClosing* pLoopCloser)$/;"	f	class:Stereo_VO::LocalMapping
SetLoopClosing	Tracking.cc	/^void Tracking::SetLoopClosing(LoopClosing *pLoopClosing)$/;"	f	class:Stereo_VO::Tracking
SetNotErase	KeyFrame.cc	/^void KeyFrame::SetNotErase()$/;"	f	class:Stereo_VO::KeyFrame
SetNotStop	LocalMapping.cc	/^bool LocalMapping::SetNotStop(bool flag)$/;"	f	class:Stereo_VO::LocalMapping
SetPose	Frame.cc	/^void Frame::SetPose(cv::Mat Tcw)$/;"	f	class:Stereo_VO::Frame
SetPose	KeyFrame.cc	/^void KeyFrame::SetPose(const cv::Mat &Tcw_)$/;"	f	class:Stereo_VO::KeyFrame
SetRansacParameters	PnPsolver.cc	/^void PnPsolver::SetRansacParameters(double probability, int minInliers, int maxIterations, int minSet, float epsilon, float th2)$/;"	f	class:Stereo_VO::PnPsolver
SetRansacParameters	Sim3Solver.cc	/^void Sim3Solver::SetRansacParameters(double probability, int minInliers, int maxIterations)$/;"	f	class:Stereo_VO::Sim3Solver
SetReferenceMapPoints	Map.cc	/^void Map::SetReferenceMapPoints(const vector<MapPoint *> &vpMPs)$/;"	f	class:Stereo_VO::Map
SetTracker	LocalMapping.cc	/^void LocalMapping::SetTracker(Tracking *pTracker)$/;"	f	class:Stereo_VO::LocalMapping
SetTracker	LoopClosing.cc	/^void LoopClosing::SetTracker(Tracking *pTracker)$/;"	f	class:Stereo_VO::LoopClosing
SetViewer	Tracking.cc	/^void Tracking::SetViewer(Viewer *pViewer)$/;"	f	class:Stereo_VO::Tracking
SetWorldPos	MapPoint.cc	/^void MapPoint::SetWorldPos(const cv::Mat &Pos)$/;"	f	class:Stereo_VO::MapPoint
Shutdown	System.cc	/^void System::Shutdown()$/;"	f	class:Stereo_VO::System
Sim3Solver	Sim3Solver.cc	/^Sim3Solver::Sim3Solver(KeyFrame *pKF1, KeyFrame *pKF2, const vector<MapPoint *> &vpMatched12, const bool bFixScale):$/;"	f	class:Stereo_VO::Sim3Solver
SkewSymmetricMatrix	LocalMapping.cc	/^cv::Mat LocalMapping::SkewSymmetricMatrix(const cv::Mat &v)$/;"	f	class:Stereo_VO::LocalMapping
StereoInitialization	Tracking.cc	/^void Tracking::StereoInitialization()$/;"	f	class:Stereo_VO::Tracking
Stop	LocalMapping.cc	/^bool LocalMapping::Stop()$/;"	f	class:Stereo_VO::LocalMapping
Stop	Viewer.cc	/^bool Viewer::Stop()$/;"	f	class:Stereo_VO::Viewer
System	System.cc	/^System::System(const string &strVocFile, const string &strSettingsFile, const eSensor sensor,$/;"	f	class:Stereo_VO::System
TH_HIGH	ORBmatcher.cc	/^const int ORBmatcher::TH_HIGH = 100;$/;"	m	class:Stereo_VO::ORBmatcher	file:
TH_LOW	ORBmatcher.cc	/^const int ORBmatcher::TH_LOW = 50;$/;"	m	class:Stereo_VO::ORBmatcher	file:
Track	Tracking.cc	/^void Tracking::Track()$/;"	f	class:Stereo_VO::Tracking
TrackLocalMap	Tracking.cc	/^bool Tracking::TrackLocalMap()$/;"	f	class:Stereo_VO::Tracking
TrackMonocular	System.cc	/^cv::Mat System::TrackMonocular(const cv::Mat &im, const double &timestamp)$/;"	f	class:Stereo_VO::System
TrackRGBD	System.cc	/^cv::Mat System::TrackRGBD(const cv::Mat &im, const cv::Mat &depthmap, const double &timestamp)$/;"	f	class:Stereo_VO::System
TrackReferenceKeyFrame	Tracking.cc	/^bool Tracking::TrackReferenceKeyFrame()$/;"	f	class:Stereo_VO::Tracking
TrackStereo	System.cc	/^cv::Mat System::TrackStereo(const cv::Mat &imLeft, const cv::Mat &imRight, const double &timestamp)$/;"	f	class:Stereo_VO::System
TrackWithMotionModel	Tracking.cc	/^bool Tracking::TrackWithMotionModel()$/;"	f	class:Stereo_VO::Tracking
TrackedMapPoints	KeyFrame.cc	/^int KeyFrame::TrackedMapPoints(const int &minObs)$/;"	f	class:Stereo_VO::KeyFrame
Tracking	Tracking.cc	/^Tracking::Tracking(System *pSys, ORBVocabulary* pVoc, FrameDrawer *pFrameDrawer, MapDrawer *pMapDrawer, Map *pMap, KeyFrameDatabase* pKFDB, const string &strSettingPath, const int sensor):$/;"	f	class:Stereo_VO::Tracking
Triangulate	Initializer.cc	/^void Initializer::Triangulate(const cv::KeyPoint &kp1, const cv::KeyPoint &kp2, const cv::Mat &P1, const cv::Mat &P2, cv::Mat &x3D)$/;"	f	class:Stereo_VO::Initializer
UndistortKeyPoints	Frame.cc	/^void Frame::UndistortKeyPoints()$/;"	f	class:Stereo_VO::Frame
UnprojectStereo	Frame.cc	/^cv::Mat Frame::UnprojectStereo(const int &i)$/;"	f	class:Stereo_VO::Frame
UnprojectStereo	KeyFrame.cc	/^cv::Mat KeyFrame::UnprojectStereo(int i)$/;"	f	class:Stereo_VO::KeyFrame
Update	FrameDrawer.cc	/^void FrameDrawer::Update(Tracking *pTracker)$/;"	f	class:Stereo_VO::FrameDrawer
UpdateBestCovisibles	KeyFrame.cc	/^void KeyFrame::UpdateBestCovisibles()$/;"	f	class:Stereo_VO::KeyFrame
UpdateConnections	KeyFrame.cc	/^void KeyFrame::UpdateConnections()$/;"	f	class:Stereo_VO::KeyFrame
UpdateLastFrame	Tracking.cc	/^void Tracking::UpdateLastFrame()$/;"	f	class:Stereo_VO::Tracking
UpdateLocalKeyFrames	Tracking.cc	/^void Tracking::UpdateLocalKeyFrames()$/;"	f	class:Stereo_VO::Tracking
UpdateLocalMap	Tracking.cc	/^void Tracking::UpdateLocalMap()$/;"	f	class:Stereo_VO::Tracking
UpdateLocalPoints	Tracking.cc	/^void Tracking::UpdateLocalPoints()$/;"	f	class:Stereo_VO::Tracking
UpdateNormalAndDepth	MapPoint.cc	/^void MapPoint::UpdateNormalAndDepth()$/;"	f	class:Stereo_VO::MapPoint
UpdatePoseMatrices	Frame.cc	/^void Frame::UpdatePoseMatrices()$/;"	f	class:Stereo_VO::Frame
Viewer	Viewer.cc	/^Viewer::Viewer(System* pSystem, FrameDrawer *pFrameDrawer, MapDrawer *pMapDrawer, Tracking *pTracking, const string &strSettingPath):$/;"	f	class:Stereo_VO::Viewer
add	KeyFrameDatabase.cc	/^void KeyFrameDatabase::add(KeyFrame *pKF)$/;"	f	class:Stereo_VO::KeyFrameDatabase
add_correspondence	PnPsolver.cc	/^void PnPsolver::add_correspondence(double X, double Y, double Z, double u, double v)$/;"	f	class:Stereo_VO::PnPsolver
bit_pattern_31_	ORBextractor.cc	/^static int bit_pattern_31_[256*4] =$/;"	m	namespace:Stereo_VO	file:
choose_control_points	PnPsolver.cc	/^void PnPsolver::choose_control_points(void)$/;"	f	class:Stereo_VO::PnPsolver
clear	KeyFrameDatabase.cc	/^void KeyFrameDatabase::clear()$/;"	f	class:Stereo_VO::KeyFrameDatabase
clear	Map.cc	/^void Map::clear()$/;"	f	class:Stereo_VO::Map
computeDescriptors	ORBextractor.cc	/^static void computeDescriptors(const Mat& image, vector<KeyPoint>& keypoints, Mat& descriptors,$/;"	f	namespace:Stereo_VO
computeOrbDescriptor	ORBextractor.cc	/^static void computeOrbDescriptor(const KeyPoint& kpt,$/;"	f	namespace:Stereo_VO
computeOrientation	ORBextractor.cc	/^static void computeOrientation(const Mat& image, vector<KeyPoint>& keypoints, const vector<int>& umax)$/;"	f	namespace:Stereo_VO
compute_A_and_b_gauss_newton	PnPsolver.cc	/^void PnPsolver::compute_A_and_b_gauss_newton(const double * l_6x10, const double * rho,$/;"	f	class:Stereo_VO::PnPsolver
compute_L_6x10	PnPsolver.cc	/^void PnPsolver::compute_L_6x10(const double * ut, double * l_6x10)$/;"	f	class:Stereo_VO::PnPsolver
compute_R_and_t	PnPsolver.cc	/^double PnPsolver::compute_R_and_t(const double * ut, const double * betas,$/;"	f	class:Stereo_VO::PnPsolver
compute_barycentric_coordinates	PnPsolver.cc	/^void PnPsolver::compute_barycentric_coordinates(void)$/;"	f	class:Stereo_VO::PnPsolver
compute_ccs	PnPsolver.cc	/^void PnPsolver::compute_ccs(const double * betas, const double * ut)$/;"	f	class:Stereo_VO::PnPsolver
compute_pcs	PnPsolver.cc	/^void PnPsolver::compute_pcs(void)$/;"	f	class:Stereo_VO::PnPsolver
compute_pose	PnPsolver.cc	/^double PnPsolver::compute_pose(double R[3][3], double t[3])$/;"	f	class:Stereo_VO::PnPsolver
compute_rho	PnPsolver.cc	/^void PnPsolver::compute_rho(double * rho)$/;"	f	class:Stereo_VO::PnPsolver
copy_R_and_t	PnPsolver.cc	/^void PnPsolver::copy_R_and_t(const double R_src[3][3], const double t_src[3],$/;"	f	class:Stereo_VO::PnPsolver
cx	Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:Stereo_VO::Frame	file:
cy	Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:Stereo_VO::Frame	file:
dist2	PnPsolver.cc	/^double PnPsolver::dist2(const double * p1, const double * p2)$/;"	f	class:Stereo_VO::PnPsolver
dot	PnPsolver.cc	/^double PnPsolver::dot(const double * v1, const double * v2)$/;"	f	class:Stereo_VO::PnPsolver
erase	KeyFrameDatabase.cc	/^void KeyFrameDatabase::erase(KeyFrame* pKF)$/;"	f	class:Stereo_VO::KeyFrameDatabase
estimate_R_and_t	PnPsolver.cc	/^void PnPsolver::estimate_R_and_t(double R[3][3], double t[3])$/;"	f	class:Stereo_VO::PnPsolver
factorPI	ORBextractor.cc	/^const float factorPI = (float)(CV_PI\/180.f);$/;"	m	namespace:Stereo_VO	file:
fill_M	PnPsolver.cc	/^void PnPsolver::fill_M(CvMat * M,$/;"	f	class:Stereo_VO::PnPsolver
find	PnPsolver.cc	/^cv::Mat PnPsolver::find(vector<bool> &vbInliers, int &nInliers)$/;"	f	class:Stereo_VO::PnPsolver
find	Sim3Solver.cc	/^cv::Mat Sim3Solver::find(vector<bool> &vbInliers12, int &nInliers)$/;"	f	class:Stereo_VO::Sim3Solver
find_betas_approx_1	PnPsolver.cc	/^void PnPsolver::find_betas_approx_1(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:Stereo_VO::PnPsolver
find_betas_approx_2	PnPsolver.cc	/^void PnPsolver::find_betas_approx_2(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:Stereo_VO::PnPsolver
find_betas_approx_3	PnPsolver.cc	/^void PnPsolver::find_betas_approx_3(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:Stereo_VO::PnPsolver
fx	Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:Stereo_VO::Frame	file:
fy	Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:Stereo_VO::Frame	file:
gauss_newton	PnPsolver.cc	/^void PnPsolver::gauss_newton(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:Stereo_VO::PnPsolver
hasChild	KeyFrame.cc	/^bool KeyFrame::hasChild(KeyFrame *pKF)$/;"	f	class:Stereo_VO::KeyFrame
invfx	Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:Stereo_VO::Frame	file:
invfy	Frame.cc	/^float Frame::cx, Frame::cy, Frame::fx, Frame::fy, Frame::invfx, Frame::invfy;$/;"	m	class:Stereo_VO::Frame	file:
isBad	KeyFrame.cc	/^bool KeyFrame::isBad()$/;"	f	class:Stereo_VO::KeyFrame
isBad	MapPoint.cc	/^bool MapPoint::isBad()$/;"	f	class:Stereo_VO::MapPoint
isFinished	LocalMapping.cc	/^bool LocalMapping::isFinished()$/;"	f	class:Stereo_VO::LocalMapping
isFinished	LoopClosing.cc	/^bool LoopClosing::isFinished()$/;"	f	class:Stereo_VO::LoopClosing
isFinished	Viewer.cc	/^bool Viewer::isFinished()$/;"	f	class:Stereo_VO::Viewer
isInFrustum	Frame.cc	/^bool Frame::isInFrustum(MapPoint *pMP, float viewingCosLimit)$/;"	f	class:Stereo_VO::Frame
isStopped	LocalMapping.cc	/^bool LocalMapping::isStopped()$/;"	f	class:Stereo_VO::LocalMapping
isStopped	Viewer.cc	/^bool Viewer::isStopped()$/;"	f	class:Stereo_VO::Viewer
iterate	PnPsolver.cc	/^cv::Mat PnPsolver::iterate(int nIterations, bool &bNoMore, vector<bool> &vbInliers, int &nInliers)$/;"	f	class:Stereo_VO::PnPsolver
iterate	Sim3Solver.cc	/^cv::Mat Sim3Solver::iterate(int nIterations, bool &bNoMore, vector<bool> &vbInliers, int &nInliers)$/;"	f	class:Stereo_VO::Sim3Solver
mGlobalMutex	MapPoint.cc	/^mutex MapPoint::mGlobalMutex;$/;"	m	class:Stereo_VO::MapPoint	file:
mat_to_quat	PnPsolver.cc	/^void PnPsolver::mat_to_quat(const double R[3][3], double q[4])$/;"	f	class:Stereo_VO::PnPsolver
mbInitialComputations	Frame.cc	/^bool Frame::mbInitialComputations=true;$/;"	m	class:Stereo_VO::Frame	file:
mfGridElementHeightInv	Frame.cc	/^float Frame::mfGridElementWidthInv, Frame::mfGridElementHeightInv;$/;"	m	class:Stereo_VO::Frame	file:
mfGridElementWidthInv	Frame.cc	/^float Frame::mfGridElementWidthInv, Frame::mfGridElementHeightInv;$/;"	m	class:Stereo_VO::Frame	file:
mnMaxX	Frame.cc	/^float Frame::mnMinX, Frame::mnMinY, Frame::mnMaxX, Frame::mnMaxY;$/;"	m	class:Stereo_VO::Frame	file:
mnMaxY	Frame.cc	/^float Frame::mnMinX, Frame::mnMinY, Frame::mnMaxX, Frame::mnMaxY;$/;"	m	class:Stereo_VO::Frame	file:
mnMinX	Frame.cc	/^float Frame::mnMinX, Frame::mnMinY, Frame::mnMaxX, Frame::mnMaxY;$/;"	m	class:Stereo_VO::Frame	file:
mnMinY	Frame.cc	/^float Frame::mnMinX, Frame::mnMinY, Frame::mnMaxX, Frame::mnMaxY;$/;"	m	class:Stereo_VO::Frame	file:
nNextId	Frame.cc	/^long unsigned int Frame::nNextId=0;$/;"	m	class:Stereo_VO::Frame	file:
nNextId	KeyFrame.cc	/^long unsigned int KeyFrame::nNextId=0;$/;"	m	class:Stereo_VO::KeyFrame	file:
nNextId	MapPoint.cc	/^long unsigned int MapPoint::nNextId=0;$/;"	m	class:Stereo_VO::MapPoint	file:
operator ()	ORBextractor.cc	/^void ORBextractor::operator()( InputArray _image, InputArray _mask, vector<KeyPoint>& _keypoints,$/;"	f	class:Stereo_VO::ORBextractor
print_pose	PnPsolver.cc	/^void PnPsolver::print_pose(const double R[3][3], const double t[3])$/;"	f	class:Stereo_VO::PnPsolver
qr_solve	PnPsolver.cc	/^void PnPsolver::qr_solve(CvMat * A, CvMat * b, CvMat * X)$/;"	f	class:Stereo_VO::PnPsolver
relative_error	PnPsolver.cc	/^void PnPsolver::relative_error(double & rot_err, double & transl_err,$/;"	f	class:Stereo_VO::PnPsolver
reprojection_error	PnPsolver.cc	/^double PnPsolver::reprojection_error(const double R[3][3], const double t[3])$/;"	f	class:Stereo_VO::PnPsolver
reset_correspondences	PnPsolver.cc	/^void PnPsolver::reset_correspondences(void)$/;"	f	class:Stereo_VO::PnPsolver
set_maximum_number_of_correspondences	PnPsolver.cc	/^void PnPsolver::set_maximum_number_of_correspondences(int n)$/;"	f	class:Stereo_VO::PnPsolver
solve_for_sign	PnPsolver.cc	/^void PnPsolver::solve_for_sign(void)$/;"	f	class:Stereo_VO::PnPsolver
stopRequested	LocalMapping.cc	/^bool LocalMapping::stopRequested()$/;"	f	class:Stereo_VO::LocalMapping
toCvMat	Converter.cc	/^cv::Mat Converter::toCvMat(const Eigen::Matrix3d &m)$/;"	f	class:Stereo_VO::Converter
toCvMat	Converter.cc	/^cv::Mat Converter::toCvMat(const Eigen::Matrix<double,3,1> &m)$/;"	f	class:Stereo_VO::Converter
toCvMat	Converter.cc	/^cv::Mat Converter::toCvMat(const Eigen::Matrix<double,4,4> &m)$/;"	f	class:Stereo_VO::Converter
toCvMat	Converter.cc	/^cv::Mat Converter::toCvMat(const g2o::SE3Quat &SE3)$/;"	f	class:Stereo_VO::Converter
toCvMat	Converter.cc	/^cv::Mat Converter::toCvMat(const g2o::Sim3 &Sim3)$/;"	f	class:Stereo_VO::Converter
toCvSE3	Converter.cc	/^cv::Mat Converter::toCvSE3(const Eigen::Matrix<double,3,3> &R, const Eigen::Matrix<double,3,1> &t)$/;"	f	class:Stereo_VO::Converter
toDescriptorVector	Converter.cc	/^std::vector<cv::Mat> Converter::toDescriptorVector(const cv::Mat &Descriptors)$/;"	f	class:Stereo_VO::Converter
toMatrix3d	Converter.cc	/^Eigen::Matrix<double,3,3> Converter::toMatrix3d(const cv::Mat &cvMat3)$/;"	f	class:Stereo_VO::Converter
toQuaternion	Converter.cc	/^std::vector<float> Converter::toQuaternion(const cv::Mat &M)$/;"	f	class:Stereo_VO::Converter
toSE3Quat	Converter.cc	/^g2o::SE3Quat Converter::toSE3Quat(const cv::Mat &cvT)$/;"	f	class:Stereo_VO::Converter
toVector3d	Converter.cc	/^Eigen::Matrix<double,3,1> Converter::toVector3d(const cv::Mat &cvVector)$/;"	f	class:Stereo_VO::Converter
toVector3d	Converter.cc	/^Eigen::Matrix<double,3,1> Converter::toVector3d(const cv::Point3f &cvPoint)$/;"	f	class:Stereo_VO::Converter
~PnPsolver	PnPsolver.cc	/^PnPsolver::~PnPsolver()$/;"	f	class:Stereo_VO::PnPsolver
